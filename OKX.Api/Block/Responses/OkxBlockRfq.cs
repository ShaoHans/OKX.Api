namespace OKX.Api.Block;

/// <summary>
/// OKX Block RFQ
/// </summary>
public record OkxBlockRfq
{
    /// <summary>
    /// The timestamp the RFQ was created. Unix timestamp format in milliseconds.
    /// </summary>
    [JsonProperty("cTime")]
    public long CreateTimestamp { get; set; }

    /// <summary>
    /// The timestamp the RFQ was created.
    /// </summary>
    [JsonIgnore]
    public DateTime CreateTime => CreateTimestamp.ConvertFromMilliseconds();

    /// <summary>
    /// The timestamp the RFQ was last updated. Unix timestamp format in milliseconds.
    /// </summary>
    [JsonProperty("uTime")]
    public long? UpdateTimestamp { get; set; }

    /// <summary>
    /// The timestamp the RFQ was last updated.
    /// </summary>
    [JsonIgnore]
    public DateTime? UpdateTime => UpdateTimestamp?.ConvertFromMilliseconds();

    /// <summary>
    /// The status of the RFQ.
    /// Valid values can be active canceled pending_fill filled expired traded_away failed.
    /// traded_away only applies to Maker
    /// </summary>
    [JsonProperty("state")]
    public OkxBlockState State { get; set; }

    /// <summary>
    /// The list of counterparties traderCode the RFQ was broadcast to.
    /// </summary>
    [JsonProperty("counterparties")]
    public List<string> Counterparties { get; set; } = [];

    /// <summary>
    /// The timestamp the RFQ expires. Unix timestamp format in milliseconds.
    /// If all legs are options, the RFQ will expire after 10 minutes; otherwise, the RFQ will expire after 2 minutes.
    /// </summary>
    [JsonProperty("validUntil")]
    public long? ValidUntilTimestamp { get; set; }

    /// <summary>
    /// The timestamp the RFQ expires.
    /// If all legs are options, the RFQ will expire after 10 minutes; otherwise, the RFQ will expire after 2 minutes.
    /// </summary>
    [JsonIgnore]
    public DateTime? ValidUntilTime => ValidUntilTimestamp?.ConvertFromMilliseconds();

    /// <summary>
    /// Client-supplied RFQ ID. This attribute is treated as client sensitive information. It will not be exposed to the Maker, only return empty string.
    /// </summary>
    [JsonProperty("clRfqId")]
    public string ClientRfqId { get; set; } = string.Empty;

    /// <summary>
    /// Whether the RFQ can be partially filled provided that the shape of legs stays the same.
    /// </summary>
    [JsonProperty("allowPartialExecution")]
    public bool AllowPartialExecution { get; set; }

    /// <summary>
    /// A unique identifier of taker.
    /// </summary>
    [JsonProperty("traderCode")]
    public string TraderCode { get; set; } = string.Empty;

    /// <summary>
    /// The unique identifier of the RFQ generated by system.
    /// </summary>
    [JsonProperty("rfqId")]
    public string RfqId { get; set; } = string.Empty;

    /// <summary>
    /// An Array of objects containing each leg of the RFQ.
    /// </summary>
    [JsonProperty("legs")]
    public List<OkxBlockLegResponse> Legs { get; set; } = [];

    /// <summary>
    /// Group RFQ ID
    /// Only applicable to group RFQ, return "" for normal RFQ
    /// </summary>
    [JsonProperty("groupId")]
    public string GroupId { get; set; } = string.Empty;

    /// <summary>
    /// Account level allocation of the RFQ
    /// </summary>
    [JsonProperty("acctAlloc")]
    public List<OkxBlockRfqAccountAllocation> AccountLevelAllocations { get; set; } = [];

    /// <summary>
    /// Reasons of state. Valid values can be mmp_canceled.
    /// </summary>
    [JsonProperty("reason")]
    public string Reason { get; set; } = string.Empty;
}

/// <summary>
/// OKX Block Account Level Allocation Response
/// </summary>
public record OkxBlockRfqAccountAllocation
{
    /// <summary>
    /// The name of the allocated account of the RFQ.
    /// </summary>
    [JsonProperty("acct")]
    public string Account { get; set; } = string.Empty;

    /// <summary>
    /// The code of the event execution result, 0 means success
    /// </summary>
    [JsonProperty("sCode")]
    public string Code { get; set; } = string.Empty;

    /// <summary>
    /// Rejection message if the request is unsuccessful
    /// </summary>
    [JsonProperty("sMsg")]
    public string Message { get; set; } = string.Empty;

    /// <summary>
    /// The allocated legs of the account.
    /// </summary>
    [JsonProperty("legs")]
    public IEnumerable<OkxBlockRfqAccountAllocationLeg> Legs { get; set; } = [];
}

/// <summary>
/// OKX Block Account Level Allocation Leg Response
/// </summary>
public record OkxBlockRfqAccountAllocationLeg
{
    /// <summary>
    /// The Instrument ID of each leg. Example : "BTC-USDT-SWAP"
    /// </summary>
    [JsonProperty("instId")]
    public string InstrumentId { get; set; } = string.Empty;

    /// <summary>
    /// The size of each leg
    /// </summary>
    [JsonProperty("sz")]
    public decimal? Size { get; set; }

    /// <summary>
    /// Trade mode
    /// </summary>
    [JsonProperty("tdMode")]
    public OkxTradeMode? TradeMode { get; set; }

    /// <summary>
    /// Margin currency.
    /// </summary>
    [JsonProperty("ccy")]
    public string Currency { get; set; } = string.Empty;

    /// <summary>
    /// Position side
    /// </summary>
    [JsonProperty("posSide")]
    public OkxTradePositionSide? PositionSide { get; set; }
}